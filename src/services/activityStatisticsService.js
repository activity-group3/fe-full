import axios from "axios";
const API_URL = process.env.REACT_APP_API_URL || "http://localhost:8080";

/**
 * Service for handling activity statistics API calls
 */
const activityStatisticsService = {
  /**
   * Get statistics for a specific activity
   * @param {number} activityId - The ID of the activity
   * @returns {Promise} - Promise resolving to activity statistics data
   */
  async getActivityStatistics(activityId) {
    try {
      const response = await axios.get(`${API_URL}/api/activity-statistics/${activityId}`, {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("access_token")}`,
        },
      });
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching activity statistics:", error);
      throw error;
    }
  },

  /**
   * Get activity statistics for a specific time range
   * @param {number} activityId - The ID of the activity
   * @param {Date} startDate - Start date for the time range
   * @param {Date} endDate - End date for the time range
   * @returns {Promise} - Promise resolving to time-range specific activity statistics
   */
  getActivityStatisticsByTimeRange: async (activityId, startDate, endDate) => {
    try {
      const startDateISO = startDate.toISOString();
      const endDateISO = endDate.toISOString();

      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/time-range`, 
        {
          params: {
            startDate: startDateISO,
            endDate: endDateISO
          },
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching activity statistics by time range:", error);
      throw error;
    }
  },

  /**
   * Get participation trend data for a specific activity
   * @param {number} activityId - The ID of the activity
   * @returns {Promise} - Promise resolving to participation trend data
   */
  getParticipationTrend: async (activityId) => {
    try {
      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/participation-trend`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching participation trend data:", error);
      throw error;
    }
  },
  
  /**
   * Get detailed feedback analysis for a specific activity
   * @param {number} activityId - The ID of the activity
   * @returns {Promise} - Promise resolving to feedback analysis data
   */
  getFeedbackAnalysis: async (activityId) => {
    try {
      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/feedback-analysis`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching feedback analysis data:", error);
      throw error;
    }
  },
  
  /**
   * Get comparative analysis for a specific activity
   * @param {number} activityId - The ID of the activity
   * @returns {Promise} - Promise resolving to comparative analysis data
   */
  getComparativeAnalysis: async (activityId) => {
    try {
      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/comparative-analysis`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching comparative analysis data:", error);
      throw error;
    }
  },
  
  /**
   * Get time series data for a specific activity
   * @param {number} activityId - The ID of the activity
   * @returns {Promise} - Promise resolving to time series data
   */
  getTimeSeriesData: async (activityId) => {
    try {
      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/time-series`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching time series data:", error);
      throw error;
    }
  },
  
  /**
   * Get effectiveness metrics for a specific activity
   * @param {number} activityId - The ID of the activity
   * @param {number} estimatedCost - Estimated cost of the activity
   * @param {number} estimatedValue - Estimated value generated by the activity
   * @returns {Promise} - Promise resolving to effectiveness metrics data
   */
  getEffectivenessMetrics: async (activityId, estimatedCost = 1000, estimatedValue = 2000) => {
    try {
      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/effectiveness-metrics`,
        {
          params: {
            estimatedCost,
            estimatedValue
          },
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching effectiveness metrics data:", error);
      throw error;
    }
  },
  
  /**
   * Get improvement recommendations for a specific activity
   * @param {number} activityId - The ID of the activity
   * @returns {Promise} - Promise resolving to improvement recommendations data
   */
  getImprovementRecommendations: async (activityId) => {
    try {
      const response = await axios.get(
        `${API_URL}/api/activity-statistics/${activityId}/improvement-recommendations`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("access_token")}`,
          },
        }
      );
      
      return response.data.data;
    } catch (error) {
      console.error("Error fetching improvement recommendations data:", error);
      throw error;
    }
  },
};

export default activityStatisticsService;
